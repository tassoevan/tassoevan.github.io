{"version":3,"file":"component---src-pages-index-tsx-15e061f93cee571c6428.js","mappings":"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","sources":["webpack://@tassoevan/tassoevan.github.io/./src/hooks/useMediaQuery.ts","webpack://@tassoevan/tassoevan.github.io/./src/components/Layout.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/Link.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/Post.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/SEO.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/Header.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/PostList.tsx","webpack://@tassoevan/tassoevan.github.io/./src/pages/index.tsx","webpack://@tassoevan/tassoevan.github.io/./src/siteMetadata.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nexport const useStaticMediaQuery = (_query: string) => {\n  return false;\n};\n\nexport const useDynamicMediaQuery = (query: string) => {\n  const [isMatching, setMatching] = useState(() => matchMedia(query).matches);\n\n  useEffect(() => {\n    const mediaQuery = matchMedia(query);\n\n    const handleChange = () => {\n      setMatching(mediaQuery.matches);\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n    };\n  }, [query]);\n\n  return isMatching;\n};\n\nexport const useMediaQuery =\n  typeof window !== 'undefined' && !!window.matchMedia\n    ? useDynamicMediaQuery\n    : useStaticMediaQuery;\n","import React, { ReactNode } from 'react';\nimport styled, {\n  createGlobalStyle,\n  ThemeProvider,\n  css,\n} from 'styled-components';\nimport 'normalize.css';\nimport { useMediaQuery } from '../hooks/useMediaQuery';\n\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    isDark: boolean;\n  }\n}\n\nconst wordWrapMixin = css`\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  -ms-word-break: break-all;\n  word-break: break-word;\n  -ms-hyphens: auto;\n  -moz-hyphens: auto;\n  -webkit-hyphens: auto;\n  hyphens: auto;\n`;\n\nconst foregroundColor = (props: { theme: { isDark: boolean } }) =>\n  props.theme.isDark ? '#ececec' : 'hsl(0deg, 0%, 30%)';\n\nconst backgroundColor = (props: { theme: { isDark: boolean } }) =>\n  props.theme.isDark ? 'hsl(0deg, 0%, 30%)' : '#ececec';\n\nconst alternativeBackgroundColor = (props: { theme: { isDark: boolean } }) =>\n  props.theme.isDark ? 'hsla(0deg, 0%, 70%, 10%)' : 'hsla(0deg, 0%, 30%, 10%)';\n\nconst primaryColor = 'rgb(46, 170, 190)';\nconst accentColor = 'rgba(46, 170, 190, 90%)';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    font-size: 100%;\n    font-family: Baskerville, 'Baskerville Old Face', 'Goudy Old Style', Garamond, 'Times New Roman', serif;\n    scroll-behavior: smooth;\n  }\n\n  body {\n    font-size: 1rem;\n    line-height: 1.5;\n    margin: 0;\n    color: ${foregroundColor};\n    background-color: ${backgroundColor};\n    padding: 1rem;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    line-height: 1.1;\n    font-family: inherit;\n    font-weight: 700;\n    margin-top: 3rem;\n    margin-bottom: 1.5rem;\n    ${wordWrapMixin}\n  }\n\n  h1 { font-size: 2.35em }\n  h2 { font-size: 2.00em }\n  h3 { font-size: 1.75em }\n  h4 { font-size: 1.5em }\n  h5 { font-size: 1.25em }\n  h6 { font-size: 1em }\n\n  p {\n    margin-top: 0px;\n    margin-bottom: 2.5rem;\n  }\n\n  small, sub, sup {\n    font-size: 75%;\n  }\n\n  hr {\n    border-color: ${primaryColor};\n  }\n\n  a {\n    text-decoration: none;\n    color: ${primaryColor};\n\n    &:hover {\n      color: ${accentColor};\n      border-bottom: 1px dashed ${foregroundColor};\n    }\n  }\n\n  ul {\n    padding-left: 1.4em;\n    margin-top: 0px;\n    margin-bottom: 2.5rem;\n  }\n\n  li {\n    margin-bottom: 0.4em;\n  }\n\n  blockquote {\n    font-style: italic;\n    margin-left: 1.5em;\n    padding-left: 1em;\n    border-left: 3px solid ${primaryColor};\n  }\n\n  img {\n    height: auto;\n    max-width: 100%;\n    margin-top: 0px;\n    margin-bottom: 2.5rem;\n  }\n\n  pre {\n    background-color: ${alternativeBackgroundColor};\n    display: block;\n    padding: 1em;\n    overflow-x: auto;\n    margin-top: 0px;\n    margin-bottom: 2.5rem;\n  }\n\n  code {\n    font-size: 0.9em;\n    padding: 0 0.5em;\n    background-color: ${alternativeBackgroundColor};\n    white-space: pre-wrap;\n  }\n\n  pre > code {\n    padding: 0;\n    background-color: transparent;\n    white-space: pre;\n  }\n\n  table {\n    text-align: justify;\n    width: 100%;\n    border-collapse: collapse;\n  }\n\n  td, th {\n    padding: 0.5em;\n    border-bottom: 1px solid ${alternativeBackgroundColor};\n  }\n\n  input, textarea {\n    border: 1px solid ${foregroundColor};\n\n    &:focus {\n      border: 1px solid ${primaryColor};\n    }\n  }\n\n  textarea {\n    width: 100%;\n  }\n\n  .button, button, input[type=\"submit\"], input[type=\"reset\"], input[type=\"button\"] {\n    display: inline-block;\n    padding: 5px 10px;\n    text-align: center;\n    text-decoration: none;\n    white-space: nowrap;\n\n    background-color: ${primaryColor};\n    color: ${backgroundColor};\n    border-radius: 1px;\n    border: 1px solid ${primaryColor};\n    cursor: pointer;\n    box-sizing: border-box;\n\n    &[disabled] {\n      cursor: default;\n      opacity: .5;\n    }\n\n    &:focus, &:hover {\n      background-color: ${accentColor};\n      border-color: ${accentColor};\n      color: ${backgroundColor};\n      outline: 0;\n    }\n  }\n\n  textarea, select, input[type] {\n    color: ${foregroundColor};\n    padding: 6px 10px;\n    margin-bottom: 10px;\n    background-color: ${alternativeBackgroundColor};\n    border: 1px solid ${alternativeBackgroundColor};\n    border-radius: 4px;\n    box-shadow: none;\n    box-sizing: border-box;\n\n    &:focus {\n      border: 1px solid ${primaryColor};\n      outline: 0;\n    }\n  }\n\n  input[type=\"checkbox\"]:focus {\n    outline: 1px dotted ${primaryColor};\n  }\n\n  label, legend, fieldset {\n    display: block;\n    margin-bottom: .5rem;\n    font-weight: 600;\n  }\n`;\n\nconst BodyTitle = styled.h1`\n  display: none;\n`;\n\ninterface LayoutProps {\n  children: ReactNode;\n  title: string;\n}\n\nfunction Layout({ children, title }: LayoutProps) {\n  const preferDark = useMediaQuery('(prefers-color-scheme: dark)');\n\n  return (\n    <ThemeProvider theme={{ isDark: preferDark }}>\n      <GlobalStyle />\n      <BodyTitle>{title}</BodyTitle>\n      {children}\n    </ThemeProvider>\n  );\n}\n\nexport default Layout;\n","import { Link as GatsbyLink } from 'gatsby';\n\nimport React, { ReactNode } from 'react';\n\ninterface LinkProps {\n  href: string;\n  title?: string;\n  children: ReactNode;\n}\n\nfunction Link({ href, title, children }: LinkProps) {\n  return (\n    <GatsbyLink to={href} title={title}>\n      {children}\n    </GatsbyLink>\n  );\n}\n\nexport default Link;\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\nimport Link from './Link';\n\nconst StyledPost = styled.div`\n  max-width: 38em;\n  margin: 0 auto;\n`;\n\nconst NextArticle = styled.footer`\n  border-top: 1pt dashed currentColor;\n  text-align: right;\n  text-align: end;\n`;\n\ninterface PostProps {\n  title: string;\n  date: number;\n  children?: ReactNode;\n  timeToRead: number;\n  slug: string;\n  next?: {\n    slug: string;\n    title: string;\n  };\n}\n\nfunction Post({ title, date, children, timeToRead, slug, next }: PostProps) {\n  return (\n    <StyledPost>\n      <header>\n        <h2>\n          <Link href={slug}>{title}</Link>\n        </h2>\n        <div>\n          <time dateTime={new Date(date).toISOString()}>\n            {new Intl.DateTimeFormat('pt-BR', {\n              dateStyle: 'long',\n              timeStyle: 'short',\n            }).format(date)}\n          </time>{' '}\n          &middot; {timeToRead} {timeToRead === 1 ? 'minuto' : 'minutos'}\n        </div>\n      </header>\n      {children && <article>{children}</article>}\n      {next && (\n        <NextArticle>\n          <Link href={next.slug}>{next.title}</Link>\n        </NextArticle>\n      )}\n    </StyledPost>\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport { siteMetadata } from '../siteMetadata';\n\ninterface SEOProps {\n  title?: string;\n  description?: string;\n  lang?: string;\n}\n\nfunction SEO(props: SEOProps) {\n  const lang = props.lang || siteMetadata.lang;\n  const title = props.title\n    ? `${props.title} | ${siteMetadata.title}`\n    : siteMetadata.title;\n  const description = props.description || siteMetadata.description;\n  const creator = siteMetadata.twitterHandle;\n\n  return (\n    <>\n      <html lang={lang} />\n      <title>{title}</title>\n      <meta name='description' content={description} />\n      <meta property='og:title' content={title} />\n      <meta property='og:description' content={description} />\n      <meta property='og:type' content='website' />\n      <meta name='twitter:card' content='summary' />\n      <meta name='twitter:creator' content={creator} />\n      <meta name='twitter:title' content={title} />\n      <meta name='twitter:description' content={description} />\n    </>\n  );\n}\n\nexport default SEO;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Link from './Link';\n\nconst StyledHeader = styled.section`\n  text-align: center;\n  max-width: 38em;\n  margin: 0 auto;\n`;\n\ninterface HeaderProps {\n  title: string;\n  description: string;\n}\n\nfunction Header({ title, description }: HeaderProps) {\n  return (\n    <StyledHeader>\n      <h1>\n        <Link href='/'>{title}</Link>\n      </h1>\n      <p>{description}</p>\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Post from './Post';\n\nconst StyledPostList = styled.div`\n  max-width: 38em;\n  margin: 0 auto;\n`;\n\ninterface PostListProps {\n  posts: {\n    title: string;\n    date: number;\n    slug: string;\n    timeToRead: number;\n  }[];\n}\n\nfunction PostList({ posts }: PostListProps) {\n  return (\n    <StyledPostList>\n      {posts.map(({ title, date, slug, timeToRead }) => (\n        <Post\n          key={slug}\n          slug={slug}\n          title={title}\n          date={date}\n          timeToRead={timeToRead}\n        />\n      ))}\n    </StyledPostList>\n  );\n}\n\nexport default PostList;\n","import React from 'react';\n\nimport SEO from '../components/SEO';\nimport Layout from '../components/Layout';\nimport Header from '../components/Header';\nimport PostList from '../components/PostList';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { siteMetadata } from '../siteMetadata';\n\nfunction IndexPage() {\n  const data = useStaticQuery<{\n    allMdx: {\n      nodes: {\n        frontmatter: {\n          title: string;\n          date: string;\n        };\n        fields: {\n          slug: string;\n          timeToRead: {\n            minutes: number;\n          };\n        };\n        timeToRead: number;\n      }[];\n    };\n  }>(graphql`\n    {\n      allMdx(\n        filter: { frontmatter: { published: { eq: true } } }\n        sort: { frontmatter: { date: DESC } }\n      ) {\n        nodes {\n          frontmatter {\n            title\n            date\n          }\n          fields {\n            slug\n            timeToRead {\n              minutes\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const posts = data.allMdx.nodes.map(\n    ({ frontmatter: { title, date }, fields: { slug, timeToRead } }) => ({\n      title,\n      date: Date.parse(date),\n      slug,\n      timeToRead: Math.ceil(timeToRead.minutes),\n    })\n  );\n\n  return (\n    <>\n      <Layout title={siteMetadata.title}>\n        <Header\n          title={siteMetadata.title}\n          description={siteMetadata.description}\n        />\n        <PostList posts={posts} />\n      </Layout>\n    </>\n  );\n}\n\nexport default IndexPage;\n\nexport const Head = () => <SEO />;\n","export const siteMetadata = {\n  lang: 'pt-BR',\n  title: 'Tasso & As Vozes',\n  description:\n    'Um lugar calmo e tranquilo onde dialogo com as vozes que habitam a minha cabeça',\n  twitterHandle: '@tassoevan',\n} as const;\n"],"names":["useMediaQuery","window","matchMedia","query","isMatching","setMatching","useState","matches","useEffect","mediaQuery","handleChange","addEventListener","removeEventListener","_query","wordWrapMixin","css","foregroundColor","props","theme","isDark","backgroundColor","alternativeBackgroundColor","primaryColor","accentColor","GlobalStyle","createGlobalStyle","BodyTitle","styled","h1","withConfig","displayName","componentId","_ref","children","title","preferDark","React","ThemeProvider","href","GatsbyLink","to","StyledPost","div","NextArticle","footer","date","timeToRead","slug","next","Link","dateTime","Date","toISOString","Intl","DateTimeFormat","dateStyle","timeStyle","format","lang","siteMetadata","description","creator","twitterHandle","name","content","property","StyledHeader","section","StyledPostList","posts","map","_ref2","Post","key","useStaticQuery","allMdx","nodes","frontmatter","fields","parse","Math","ceil","minutes","Layout","Header","PostList","Head","SEO"],"sourceRoot":""}