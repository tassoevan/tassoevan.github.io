{"componentChunkName":"component---src-templates-post-js","path":"/2014-12-03/git-para-times-de-todos-os-tamanhos/","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Git para times de todos os tamanhos\",\n  \"date\": \"2014-12-04T06:30:00.000Z\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recentemente, o \", mdx(\"a\", {\n    href: \"http://code.tutsplus.com/tutorials/focusing-on-a-team-workflow-with-git--cms-22514\",\n    target: \"_blank\",\n    title: \"Focusing on a Team Workflow With Git\"\n  }, \"Tuts+ lan\\xE7ou um artigo\"), \" sugerindo um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"workflow\"), \" baseado no conhecido \", mdx(\"a\", {\n    href: \"http://nvie.com/posts/a-successful-git-branching-model/\",\n    target: \"_blank\",\n    title: \"A successful Git branching model\"\n  }, \"Git-Flow\"), \" de Vincent Driessen. Gostei das sugest\\xF5es dadas e resolvi escrever um pouco sobre esse assunto adicionando uma pitada da minha experi\\xEAncia com o uso de git em pequenas equipes.\"), mdx(\"h1\", null, \"Preciso disso?\"), mdx(\"p\", null, \"Uma vez que superamos as primeiras barreiras de aprendizado e dominamos os conceitos que o git nos traz, como submiss\\xF5es (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"commits\"), \"), ramos (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"branches\"), \"), reposit\\xF3rios etc., j\\xE1 somos capazes de dominar com relativa facilidade a administra\\xE7\\xE3o dos nossos pr\\xF3prios reposit\\xF3rios. Entretanto, mesmo nessa situa\\xE7\\xE3o de controle total, em alguns momentos decidir entre se fazer do jeito A ou fazer do jeito B \\xE9 melhor. Acredito que esse sentimento est\\xE1 presente quando percorremos o log de commits de um reposit\\xF3rio e n\\xE3o encontramos em qual o commit uma determinada modifica\\xE7\\xE3o foi feita. Quando isso ocorre, notamos pela primeira vez que mensagens de commit devem ser bem escritas para n\\xF3s mesmos, n\\xE3o apenas para escrevermos um \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"change log\"), \" pomposo que nem precisamos manter em alguns casos. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Mas o que seria uma mensagem de commit bem escrita?\")), mdx(\"p\", null, \"Se esse pequeno problema j\\xE1 \\xE9 bem inc\\xF4modo quando trabalhamos sozinhos, imagina o qu\\xE3o cr\\xEDtico ele se torna onde estamos trabalhando em equipe, seja num projeto com colegas de trabalho ou num projeto open source hospedado no GitHub ou outro servi\\xE7o popular. O que toda ferramenta de controle de vers\\xE3o se prop\\xF5e a fazer \\xE9 garantir que, quando v\\xE1rios colaboradores fazem modifica\\xE7\\xF5es sobre os mesmos arquivos, os conflitos gerados sejam detectados e resolvidos antes de que as mudan\\xE7as sejam aceitas, e o git trata desses conflitos de uma forma muito conveniente. Segundo seus usu\\xE1rios, muito superior \\xE0 forma como as demais ferramentas (SourceSafe, CVS, SVN) trabalham. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"O que n\\xE3o significa, todavia, que o git resolva os conflitos sozinho.\"), \" H\\xE1 sempre uma etapa no processo de trabalho em equipe em que o c\\xF3digo deve ser revisado e aceito por algu\\xE9m. Nessa situa\\xE7\\xE3o, gerenciar v\\xE1rios commits em conflito pode ser algo muito desafiador se n\\xE3o houver uma ordem de trabalho, mesmo em projetos pequenos. C\\xF3digo mal revisado significa adi\\xE7\\xE3o de bugs no seu software.\"), mdx(\"p\", null, \"Agora vou citar uma s\\xE9rie de regras que s\\xE3o interessantes para o gerenciamento dos reposit\\xF3rios git. S\\xE3o \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"sugest\\xF5es\"), \": voc\\xEA pode adicionar, remover ou modificar algumas propostas para que se ajustem ao ritmo de trabalho da sua equipe. E o seu tamb\\xE9m.\"), mdx(\"h1\", null, \"Quais s\\xE3o as regras do jogo?\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-1\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"master\"), \" \\xE9 a vers\\xE3o est\\xE1vel\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-2\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"develop\"), \" \\xE9 a vers\\xE3o inst\\xE1vel\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-3\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"feature-<funcionalidade>\"), \" \\xE9 uma funcionalidade nova\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-4\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"fix-<problema>\"), \" \\xE9 a corre\\xE7\\xE3o de um problema\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-5\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"hotfix-<problema>\"), \" \\xE9 a corre\\xE7\\xE3o de um problema no c\\xF3digo em \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"master\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-6\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"<funcionalidade>\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"<problema>\"), \" s\\xE3o c\\xF3digos simples\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-7\"\n  }), \"Resolva os conflitos com o branch \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"develop\"), \" antes de solicitar uma mesclagem\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-8\"\n  }), \"Enviou os commits antes de resolver os conflitos? Mescle \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"develop\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-9\"\n  }), \"O revisor de c\\xF3digo deve informar as mesclagens em \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"develop\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"master\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-10\"\n  }), \"Adicione tags aos commits de mesclagem em \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"master\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-11\"\n  }), \"Use verbos imperativos nas mensagens dos commits\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#regra-12\"\n  }), \"Frase curta + descri\\xE7\\xE3o longa\"))), mdx(\"a\", {\n    name: \"regra-1\"\n  }), mdx(\"h2\", null, \"Regra #1 - \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"master\"), \" \\xE9 a vers\\xE3o est\\xE1vel\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://twitter.com/redhotvengeance\"\n  }), \"Ian Lollar\"), \", o autor do artigo do Tuts+, estabelece essa regra como a principal. Eu concordo totalmente com ele.\"), mdx(\"p\", null, \"Quando algu\\xE9m clona um reposit\\xF3rio, sempre se espera que o c\\xF3digo do reposit\\xF3rio j\\xE1 est\\xE1 \\\"pronto para uso\\\" (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"deployable\"), \"). Se for c\\xF3digo compil\\xE1vel, ele pode ser compilado em poucos comandos para gerar um programa est\\xE1vel; se for o c\\xF3digo de um website, ele j\\xE1 pode ser enviado para o servidor.\"), mdx(\"p\", null, \"Para quem est\\xE1 acostumado com os ambientes de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"desenvolvimento\"), \", de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"homologa\\xE7\\xE3o\"), \" e de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"produ\\xE7\\xE3o\"), \", o branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \" deve conter o c\\xF3digo de produ\\xE7\\xE3o. Quando algum problema s\\xE9rio ocorre em software em produ\\xE7\\xE3o, n\\xF3s temos que agir para enviar corre\\xE7\\xF5es imediatas (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"hotfixes\"), \") sobre esse c\\xF3digo. Afinal, como voc\\xEA vai escrever um hotfix em cima do c\\xF3digo que est\\xE1 em desenvolvimento e cont\\xE9m modifica\\xE7\\xF5es que ainda est\\xE3o incompletas ou n\\xE3o foram aprovadas para produ\\xE7\\xE3o?\"), mdx(\"a\", {\n    name: \"regra-2\"\n  }), mdx(\"h2\", null, \"Regra #2 - \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"develop\"), \" \\xE9 a vers\\xE3o inst\\xE1vel\"), mdx(\"p\", null, \"Entenda-se que a vers\\xE3o inst\\xE1vel de um software \\xE9 aquela que ainda est\\xE1 incompleta ou n\\xE3o foi aprovada para produ\\xE7\\xE3o. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Incompleta\"), \", nesse sentido, significa que ainda n\\xE3o cont\\xE9m todas as funcionalidades que est\\xE3o planejadas para virar a vers\\xE3o est\\xE1vel e \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE3o quer dizer \\xE9 possui funcionalidades incompletas\"), \". Para entender o que \\xE9 isso, suponha que voc\\xEA est\\xE1 desenvolvendo uma aplica\\xE7\\xE3o divida em v\\xE1rios m\\xF3dulos. Cada m\\xF3dulo criado representa uma funcionalidade nova adicionada ao sistema. Logo, cada m\\xF3dulo pronto deve ser adiciona ao branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \", mas isso n\\xE3o significa que o m\\xF3dulo todo seja empacotado num \\xFAnico commit. Se algum m\\xF3dulo \\xE9 constitu\\xEDdo de v\\xE1rias telas, cada tela pode ser enviada ao reposit\\xF3rio como um commit diferente, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mas n\\xE3o diretamente ao branch \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"develop\")), \".\"), mdx(\"p\", null, \"Mantenha isso em mente quando trabalhar com o branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \": ele s\\xF3 deve aceitar funcionalidades \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"completas\"), \".\"), mdx(\"a\", {\n    name: \"regra-3\"\n  }), mdx(\"h2\", null, \"Regra #3 - \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"feature-<funcionalidade>\"), \" \\xE9 uma funcionalidade nova\"), mdx(\"p\", null, \"Em outras palavras, cada coisa nova que voc\\xEA adiciona ao seu software deve ser gradualmente commitada num branch espec\\xEDfico. O prefixo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-\"), \" no nome do branch indica que ele cont\\xE9m uma funcionalidade (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"feature\"), \"). Uma vez que a funcionalidade est\\xE1 completa e nenhum novo commit for adicionado a esse branch, voc\\xEA pode enviar uma solicita\\xE7\\xE3o ao revisor de c\\xF3digo do projeto pedindo que ele mescle (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"merge\"), \") os commits no branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \".\"), mdx(\"a\", {\n    name: \"regra-4\"\n  }), mdx(\"h2\", null, \"Regra #4 - \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"fix-<problema>\"), \" \\xE9 a corre\\xE7\\xE3o de um problema\"), mdx(\"p\", null, \"Quando um problema \\xE9 conhecido num projeto e ele n\\xE3o \\xE9 solucionado pela adi\\xE7\\xE3o de uma funcionalidade nova \", \"\\u2014\", \" logo, um bug \", \"\\u2014\", \", uma corre\\xE7\\xE3o deve ser enviada para o c\\xF3digo presente no branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \", mas nunca diretamente. Novamente, assim que o c\\xF3digo estiver completo no branch, voc\\xEA solicita uma mesclagem.\"), mdx(\"a\", {\n    name: \"regra-5\"\n  }), mdx(\"h2\", null, \"Regra #5 - \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"hotfix-<problema>\"), \" \\xE9 a corre\\xE7\\xE3o de um problema no c\\xF3digo em \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"master\")), mdx(\"p\", null, \"Enquanto os dois tipos de branches anteriormente citados s\\xE3o criados a partir de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \",\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout -b `feature-<funcionalidade>` `develop`\\n\")), mdx(\"p\", null, \"este tipo especial de branch precisa ser criado a partir do c\\xF3digo de produ\\xE7\\xE3o, presente em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout -b `hotfix-<problema>` `master`\\n\")), mdx(\"a\", {\n    name: \"regra-6\"\n  }), mdx(\"h2\", null, \"Regra #6 - \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<funcionalidade>\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"<problema>\"), \" s\\xE3o c\\xF3digos simples\"), mdx(\"p\", null, \"Complementando as tr\\xEAs regras anteriores, \\xE9 preciso deixar claro que descrever o nome de uma funcionalidade ou de um problema pode ser uma tarefa complicada. Quando a equipe tem acesso a algum gerenciador de incidentes (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"issue tracker\"), \"), por exemplo, os bugs s\\xE3o numerados, de forma que os branches s\\xE3o melhor descritos na forma \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fix-issue-X\"), \", onde X \\xE9 o n\\xFAmero do bug.\"), mdx(\"p\", null, \"Alguns exemplos adicionais de branches seriam \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-modulo-usuarios\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fix-bug-323\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-pagina-sobre\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hotfix-issue-23\"), \" etc. Tenha em mente que isso deve ser acordado entre todos os membros da equipe, n\\xE3o apenas de ci\\xEAncia do revisor de c\\xF3digo.\"), mdx(\"a\", {\n    name: \"regra-7\"\n  }), mdx(\"h2\", null, \"Regra #7 - Resolva os conflitos com o branch \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"develop\"), \" antes de solicitar uma mesclagem\"), mdx(\"p\", null, \"Suponha que voc\\xEA e um colega desejam criar duas funcionalidades diferentes, A e B. Voc\\xEA vai ficar com a funcionalidade A e, portanto, criar\\xE1 um branch chamado \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-A\"), \" no seu reposit\\xF3rio local. Seu colega criar\\xE1 um branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-B\"), \" no reposit\\xF3rio dele. Voc\\xEAs seguem trabalhando, mas seu colega termina o trabalho antes e solicita uma mesclagem em seguida para o revisor de c\\xF3digo. O revisor verifica que est\\xE1 tudo certo e mescla os commits do branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-B\"), \" no branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" do reposit\\xF3rio principal. Voc\\xEA termina o seu trabalho e solicita uma mesclagem. O revisor de c\\xF3digo ent\\xE3o descobre um conflito, pois o seu colega alterou algum ponto no projeto que voc\\xEA tamb\\xE9m alterou no desenvolvimento das funcionaldades. Assim, voc\\xEA precisa adicionar ao seu pr\\xF3prio branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-A\"), \" os commits de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-B\"), \" que foram adicionados em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \". A melhor forma de fazer isso \\xE9 atrav\\xE9s de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"rebasing\"), \".\"), mdx(\"p\", null, \"Rebasing \\xE9 uma t\\xE9cnica do git que consiste em reescrever os commits de um branch, reordenando-os, adicionando novos, removendo alguns e at\\xE9 mesmo reescrevendo o c\\xF3digo armazenado em certos commits. No caso apresentado, realizar rebase do branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" no branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-A\"), \" vai implicar em ter que reescrever algum commit que voc\\xEA adicionou no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-A\"), \".\"), mdx(\"p\", null, \"O ideal \\xE9 que o branch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" do seu reposit\\xF3rio local esteja sempre atualizado com rela\\xE7\\xE3o ao \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" do reposit\\xF3rio principal:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout develop\\n$ git pull origin develop\\n\")), mdx(\"p\", null, \"Em seguida, voc\\xEA pode adicionar as mudan\\xE7as de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" no seu branch:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout feature-A\\n$ git rebase develop\\n\")), mdx(\"p\", null, \"E seguir trabalhando na funcionalidade. Quando tudo estiver pronto:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git push origin feature-A\\n\")), mdx(\"a\", {\n    name: \"regra-8\"\n  }), mdx(\"h2\", null, \"Regra #8 - Enviou os commits antes de resolver os conflitos? Mescle \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"develop\")), mdx(\"p\", null, \"\\xC9 poss\\xEDvel que voc\\xEA acidentalmente envie para o reposit\\xF3rio principal o branch de trabalho sem se certificar de que ele n\\xE3o tem conflitos em rela\\xE7\\xE3o ao \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \". Se esses conflitos existem, o revisor de c\\xF3digo te informar\\xE1 disso e caber\\xE1 a voc\\xEA resolver. Como \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"voc\\xEA nunca deve reescrever o que j\\xE1 est\\xE1 no reposit\\xF3rio principal\"), \", rebasing n\\xE3o poder\\xE1 ser utilizado aqui. Como Lollar diz, rebasing \\xE9 uma a\\xE7\\xE3o destrutiva. Voc\\xEA precisa criar um commit novo que solucione os conflitos; \\xE9 exatamente o que o comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git merge\"), \" te permite fazer:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout feature-A\\n$ git merge develop\\n\")), mdx(\"p\", null, \"Uma forma simplificada de resolver os conflitos \\xE9 atrav\\xE9s do comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git mergetool\"), \". Com ele, cada conflito existente \\xE9 listado e as devidas a\\xE7\\xF5es de corre\\xE7\\xE3o s\\xE3o pedidas para voc\\xEA, uma a uma.\"), mdx(\"a\", {\n    name: \"regra-9\"\n  }), mdx(\"h2\", null, \"Regra #9 - O revisor de c\\xF3digo deve informar as mesclagens em \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"develop\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"master\")), mdx(\"p\", null, \"E como ele pode dizer que os commits adicionados em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" vieram de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-A\"), \"? Desabilitando o recurso de \", mdx(\"a\", {\n    href: \"http://ariya.ofilabs.com/2013/09/fast-forward-git-merge.html\",\n    target: \"_blank\",\n    title: \"Fast-Forward Git Merge\"\n  }, \" \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"fast-forwarding\"), \" \"), \" na mesclagem.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout develop\\n$ git merge --no-ff feature-A\\n\")), mdx(\"p\", null, \"Isto adicionar\\xE1 um commit adicional a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \" informando a mesclagem, em vez de copiar os commits de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"feature-A\"), \" em \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"develop\"), \".\"), mdx(\"p\", null, \"E qual a vantagem de se fazer isso?\"), mdx(\"a\", {\n    name: \"regra-10\"\n  }), mdx(\"h2\", null, \"Regra #10 - Adicione tags aos commits de mesclagem em \", mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"master\")), mdx(\"p\", null, \"As tags permitem que voc\\xEA marque pontos importantes no hist\\xF3rico do c\\xF3digo presente no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"master\"), \", como mudan\\xE7as de vers\\xE3o.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ git checkout master\\n$ git merge --no-ff develop\\n$ git tag -a v<vers\\xE3o> -m 'Vers\\xE3o <vers\\xE3o>'\\n\")), mdx(\"p\", null, \"Uma dica adicional, tamb\\xE9m sugerida por Lollar, \\xE9 a utiliza\\xE7\\xE3o do \", mdx(\"a\", {\n    href: \"http://semver.org/\",\n    target: \"_blank\",\n    title: \"Semantic Versioning 2.0.0\"\n  }, \"versionamento sem\\xE2ntico\"), \" para escrever os n\\xFAmeros de vers\\xF5es.\"), mdx(\"a\", {\n    name: \"regra-11\"\n  }), mdx(\"h2\", null, \"Regra #11 - Use verbos imperativos nas mensagens dos commits\"), mdx(\"p\", null, \"\\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Adiciona\"), \" a tela X\\\" em vez de \\\"Tela X adicionada\\\". \\\"\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Corrige\"), \" o bug Y\\\" em vez de \\\"Corre\\xE7\\xE3o do bug Y\\\". Alguns verbos comuns:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"adiciona\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"remove\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"corrige\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"transfere\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"atualiza\")), mdx(\"p\", null, \"Pode \\\"colar\\\" alguns verbos de \", mdx(\"a\", {\n    href: \"http://www.youtube.com/watch?v=YtdWHFwmd2o\",\n    target: \"_blank\",\n    title: \"Daft Punk - Technologic\"\n  }, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Technologic\")), \" tamb\\xE9m.\"), mdx(\"a\", {\n    name: \"regra-12\"\n  }), mdx(\"h2\", null, \"Regra #12 - Frase curta + descri\\xE7\\xE3o longa\"), mdx(\"p\", null, \"Outra recomenda\\xE7\\xE3o \\xE9 que a mensagem do commit seja uma frase curta (de at\\xE9 50 caracteres, com a primeira letra mai\\xFAscula), uma linha em branco e um par\\xE1grafo que d\\xEA uma descri\\xE7\\xE3o maior sobre o commit. Essa descri\\xE7\\xE3o, entretanto, \\xE9 opcional.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Git para times de todos os tamanhos","date":"2014-12-04T06:30:00.000Z","formattedDate":"4 de dezembro de 2014 às 06:30"},"wordCount":{"words":1590}}},"pageContext":{"slug":"/2014-12-03/git-para-times-de-todos-os-tamanhos/","next":{"slug":"/2014-10-16/symfony-process/","title":"Adeus shell_exec()"}}}}