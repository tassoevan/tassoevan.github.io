{
    "componentChunkName": "component---src-templates-post-tsx",
    "path": "/2014-10-16/symfony-process/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Adeus shell_exec()","date":"2014-10-17T06:00:00.000Z","formattedDate":"17 de outubro de 2014 às 06:00"},"excerpt":"Como  converter um PDF em imagens PNG ou JPEG ,  usando PHP ? Como  converter arquivos de vídeo enviados via upload em formatos para a web…","timeToRead":6,"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Adeus shell_exec()\",\n  \"date\": \"2014-10-17T06:00:00.000Z\",\n  \"published\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Como \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://stackoverflow.com/questions/13600598/convert-pdf-to-jpg-image-with-php\"\n  }, \"converter um PDF em imagens PNG ou JPEG\"), \", \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"usando PHP\"), \"? Como \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://stackoverflow.com/questions/1571134/how-can-i-convert-an-avi-file-to-flv-format-with-php\"\n  }, \"converter arquivos de v\\xEDdeo enviados via upload em formatos para a web\"), \", como WebM ou FLV, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"usando PHP\"), \"? Como realizar uma tarefa administrativa no servidor, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"usando PHP\"), \"?\"), mdx(\"p\", null, \"Muitas vezes nos fazemos essas perguntas e passamos por algumas decep\\xE7\\xF5es ao procurar solu\\xE7\\xF5es. A primeira \\xE9 descobrir que nem sempre podemos resolver usando \\xFAnica e exclusivamente a linguagem e/ou tecnologia que usamos em nossos projetos: PHP n\\xE3o foi constru\\xEDda para executar tarefas longas e que demandam alto processamento, como converter formatos de imagem, \\xE1udio e v\\xEDdeo. At\\xE9 podemos considerar o uso de extens\\xF5es (como a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://php.net/manual/en/book.imagick.php\"\n  }, \"ImageMagick\"), \"), mas geralmente o modo r\\xE1pido de conseguir o que se quer \\xE9 atrav\\xE9s de \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"programas externos\"), \", como \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avconv\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"convert\"), \".\"), mdx(\"p\", null, \"A principal dificuldade esperada ao realizar a integra\\xE7\\xE3o entre scripts PHP e programas externos \\xE9 a perda de compatibilidade nas diversas plataformas em que PHP \\xE9 execut\\xE1vel. A maioria dos exemplos de uso das fun\\xE7\\xF5es \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exec()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"shell_exec()\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"passthru()\"), \" utiliza programas do ecossistema Unix e, ao menos no Brasil, o n\\xFAmero de desenvolvedores PHP que rodam Windows em suas esta\\xE7\\xF5es de trabalho \\xE9 grande. Para eles, usar programas externos \\xE9 adicionar ao seu c\\xF3digo algo que s\\xF3 poder\\xE1 ser testado em servidores de teste ou desenvolvimento \", \"\\u2014\", \" uma realidade que vem mudando, a passos de formiga, com a ado\\xE7\\xE3o de ferramentas como \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.vagrantup.com/\"\n  }, \"Vagrant\"), \" e \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.docker.com/\"\n  }, \"Docker\"), \".\"), mdx(\"p\", null, \"Ent\\xE3o \\xE9 simples usar programas externos? N\\xE3o. Todo programa \\xE9 executado como um novo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"processo\"), \" do sistema, chamado pelo \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"shell\"), \" atrav\\xE9s de uma \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"linha de comando\"), \". E neste contexto, existem algumas coisas a se considerar:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deve ser garantido que nenhum n\\xFAmero abusivo de processos seja executado;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deve ser garantido que \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://en.wikipedia.org/wiki/Code_injection#Shell_injection\"\n  }, \"nenhum dado enviado execute c\\xF3digo arbitr\\xE1rio\"), \";\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Todo processo possui uma \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://en.wikipedia.org/wiki/Standard_streams#Standard_input_.28stdin.29\"\n  }, \"stream de entrada de dados\"), \", uma \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29\"\n  }, \"stream de sa\\xEDda normal\"), \" e uma \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://en.wikipedia.org/wiki/Standard_streams#Standard_error_.28stderr.29\"\n  }, \"stream de sa\\xEDda de erros\"), \";\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Alguns processos exigem intera\\xE7\\xE3o do usu\\xE1rio atrav\\xE9s da stream de entrada;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Alguns processos s\\xE3o longos;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Alguns processos escrevem dados em formatos complexos nas streams de sa\\xEDda;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Processos retornam um \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://en.wikipedia.org/wiki/Exit_status\"\n  }, \"c\\xF3digo de status de fim de execu\\xE7\\xE3o\"), \" que indica erros ocorridos durante a execu\\xE7\\xE3o.\")), mdx(\"p\", null, \"Vamos ver que op\\xE7\\xF5es as fun\\xE7\\xF5es padr\\xE3o do PHP nos fornecem para trabalhar com processos:\"), mdx(\"h1\", null, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"http://php.net/manual/en/function.shell-exec.php\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"string shell_exec(string $cmd)\")), \" ou \", mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"http://php.net/manual/en/language.operators.execution.php\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"`$cmd`\"))), mdx(\"p\", null, \"\\xC9 a fun\\xE7\\xE3o ideal para processos invocados com uma linha de comando simples e que escrevem apenas uma linha de texto na stream de sa\\xEDda.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Somente um processo pode ser executado por vez, a menos que se utilizem mecanismos de execu\\xE7\\xE3o paralela presentes no shell (e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"start convert doc.pdf images.jpg\"), \" em Windows).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA depende de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"escapeshellarg($arg)\"), \" para escapar argumentos vindos da entrada de usu\\xE1rio. Usar ou n\\xE3o usar \\xE9 por sua conta e risco. Para o operador de execu\\xE7\\xE3o (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"` `\"), \") \\xE9 imposs\\xEDvel passar dados de usu\\xE1rio, como se a defini\\xE7\\xE3o da linha de comando do processo fosse constante.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tudo o que foi escrito na stream de sa\\xEDda \\xE9 retornado pela fun\\xE7\\xE3o. Em caso de erro, entretanto, \\xE9 retornado o valor \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NULL\"), \", mesmo que dados tenham sido escritos.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"N\\xE3o permite escrever dados na stream de entrada.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA n\\xE3o pode definir um tempo m\\xE1ximo para a execu\\xE7\\xE3o do processo, embora fique limitado pelo limite de tempo de execu\\xE7\\xE3o do pr\\xF3prio script PHP.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA precisa parsear toda a stream de sa\\xEDda obtida atrav\\xE9s do retorno da fun\\xE7\\xE3o/express\\xE3o.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA n\\xE3o obt\\xE9m o c\\xF3digo de status. Se ele for zero, a fun\\xE7\\xE3o retorna o conte\\xFAdo da stream de sa\\xEDda; caso contr\\xE1rio, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"NULL\"), \" \\xE9 retornado.\")), mdx(\"h1\", null, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"http://php.net/manual/en/function.exec.php\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"string exec(string $command[, array &$output[, int &$return_var]])\"))), mdx(\"p\", null, \"Esta fun\\xE7\\xE3o adiciona um grau maior de controle sob o que \\xE9 escrito na stream de sa\\xEDda e sobre os c\\xF3digos de status.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Somente um processo pode ser executado por vez, a menos que se utilizem mecanismos de execu\\xE7\\xE3o paralela presentes no shell.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA depende de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"escapeshellarg($arg)\"), \" para escapar argumentos vindos da entrada de usu\\xE1rio. Usar ou n\\xE3o usar \\xE9 por sua conta e risco.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA pode ter acesso ao que foi escrito na stream de sa\\xEDda atrav\\xE9s do array \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$output\"), \" ou apenas da \\xFAltima linha escrita atrav\\xE9s do retorno da fun\\xE7\\xE3o.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"N\\xE3o permite escrever dados na stream de entrada.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA n\\xE3o pode definir um tempo m\\xE1ximo para a execu\\xE7\\xE3o do processo, embora fique limitado pelo limite de tempo de execu\\xE7\\xE3o do pr\\xF3prio script PHP.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA precisa parsear toda a stream de sa\\xEDda obtida atrav\\xE9s de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$output\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA obt\\xE9m o c\\xF3digo de status atrav\\xE9s de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$return_var\"), \".\")), mdx(\"h1\", null, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"http://php.net/manual/en/function.passthru.php\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"void passthru(string $command[, int &$return_var])\"))), mdx(\"p\", null, \"O uso mais comum desta fun\\xE7\\xE3o \\xE9 quando o script PHP funciona como um simples proxy para um programa externo, como um gerador de imagens ou compilador.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Somente um processo pode ser executado por vez, a menos que se utilizem mecanismos de execu\\xE7\\xE3o paralela presentes no shell.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA depende de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"escapeshellarg($arg)\"), \" para escapar argumentos vindos da entrada de usu\\xE1rio. Usar ou n\\xE3o usar \\xE9 por sua conta e risco.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A stream de sa\\xEDda do processo \\xE9 redirecionada para a stream de sa\\xEDda do script PHP. Se voc\\xEA quiser capturar a sa\\xEDda, vai ter que utilizar mecanismos de \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"output buffering\"), \" (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ob_start()\"), \").\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"N\\xE3o permite escrever dados na stream de entrada.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA n\\xE3o pode definir um tempo m\\xE1ximo para a execu\\xE7\\xE3o do processo, embora fique limitado pelo limite de tempo de execu\\xE7\\xE3o do pr\\xF3prio script PHP.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA precisa parsear toda a stream de sa\\xEDda obtida atrav\\xE9s de \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"output buffering\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA obt\\xE9m o c\\xF3digo de status atrav\\xE9s de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$return_var\"), \".\")), mdx(\"h1\", null, mdx(\"a\", {\n    parentName: \"h1\",\n    \"href\": \"php.net/manual/en/function.proc-open.php\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"resource proc_open(string $cmd, array $descriptorspec, array &$pipes[, string $cwd[, array $env[, array $other_options]]])\"))), mdx(\"p\", null, \"E aqui temos o maior controle poss\\xEDvel de processos (inclusive do diret\\xF3rio de trabalho do processo, via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$cwd\"), \") atrav\\xE9s de scripts PHP.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Esta fun\\xE7\\xE3o \\xE9 n\\xE3o-bloqueante, de modo que voc\\xEA pode iniciar quantos processos julgar adequado. Vale o bom senso para garantir que uma quantidade n\\xE3o-abusiva de processos sejam rodados paralelamente.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA depende de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"escapeshellarg($arg)\"), \" para escapar argumentos vindos da entrada de usu\\xE1rio. Usar ou n\\xE3o usar \\xE9 por sua conta e risco.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA tem acesso a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"stdin\"), \", \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"stdout\"), \" e \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"stderr\"), \" atrav\\xE9s do array \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"$pipes\"), \", como se fossem ponteiros de arquivo tradicionais.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"stdin\"), \" \\xE9 uma stream de escrita, onde voc\\xEA pode escrever usando fun\\xE7\\xF5es simples como \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"fwrite()\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"O controle de \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"timeout\"), \" dos processos pode ser implementado, j\\xE1 que o processo roda paralelamente ao script.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A leitura dos dados escritos em \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"stdout\"), \" e \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"stderr\"), \" n\\xE3o difere da leitura de um arquivo; assim, as mesmas t\\xE9cnicas empregadas para parsear um arquivo podem ser aplicadas, seja de forma integral (ler toda a stream e interpretar o formato), seja de forma cont\\xEDnua (ler a stream linha a linha e interpretar durante a execu\\xE7\\xE3o).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Voc\\xEA pode ter o c\\xF3digo de status a partir do retorno de \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"proc_close($process)\"), \".\")), mdx(\"h1\", null, \"Tudo \\xE9 complicado\"), mdx(\"p\", null, \"Pelo que se percebe, a complexidade para se executar certos processos via PHP \\xE9 semelhante \\xE0 pr\\xF3pria complexidade do processo, i.e., um processo que exige intera\\xE7\\xE3o com todas as streams, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"timeout\"), \" e controle do c\\xF3digo de status vai demandar o uso de uma fun\\xE7\\xE3o muito complexa. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://php.net/manual/en/function.proc-open.php#example-3774\"\n  }, \"Veja voc\\xEA mesmo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\n$descriptorspec = array(\\n   0 => array(\\\"pipe\\\", \\\"r\\\"),  // stdin is a pipe that the child will read from\\n   1 => array(\\\"pipe\\\", \\\"w\\\"),  // stdout is a pipe that the child will write to\\n   2 => array(\\\"file\\\", \\\"/tmp/error-output.txt\\\", \\\"a\\\") // stderr is a file to write to\\n);\\n\\n$cwd = '/tmp';\\n$env = array('some_option' => 'aeiou');\\n\\n$process = proc_open('php', $descriptorspec, $pipes, $cwd, $env);\\n\\nif (is_resource($process)) {\\n    // $pipes now looks like this:\\n    // 0 => writeable handle connected to child stdin\\n    // 1 => readable handle connected to child stdout\\n    // Any error output will be appended to /tmp/error-output.txt\\n\\n    fwrite($pipes[0], '<?php print_r($_ENV); ?>');\\n    fclose($pipes[0]);\\n\\n    echo stream_get_contents($pipes[1]);\\n    fclose($pipes[1]);\\n\\n    // It is important that you close any pipes before calling\\n    // proc_close in order to avoid a deadlock\\n    $return_value = proc_close($process);\\n\\n    echo \\\"command returned $return_value\\\\n\\\";\\n}\\n\")), mdx(\"p\", null, \"Nesse exemplo, abrimos o processo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php\"), \", escrevemos na stream de entrada o c\\xF3digo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<?php print_r($_ENV); ?>\"), \" e lemos o resultado da execu\\xE7\\xE3o na stream de sa\\xEDda do processo. Nenhum mecanismo de \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"timeout\"), \" \\xE9 implementado, bem como nenhum controle de erros \\xE9 realizado atrav\\xE9s da stream de erros e do c\\xF3digo de status, e mesmo assim temos um c\\xF3digo assustador para programadores novatos.\"), mdx(\"h2\", null, \"Symfony Process ao resgate\"), mdx(\"p\", null, \"Streams, c\\xF3digo de status, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"timeout\"), \", diret\\xF3rio de trabalho, argumentos escapados... Muitos s\\xE3o os componentes e detalhes presentes na execu\\xE7\\xE3o de um processo. Para nossa sorte, o componente \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://symfony.com/doc/current/components/process.html\"\n  }, \"Symfony Process\"), \" prov\\xEA um mecanismo simples para execu\\xE7\\xE3o e controle de processos (e ao contr\\xE1rio do que muitos pensam \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"n\\xE3o \\xE9 necess\\xE1rio estar utilizando o framework Symfony para usufruir deste componente\"), \"). Vamos recriar o exemplo supracitado para demonstrar isso.\"), mdx(\"p\", null, \"Primeiramente, voc\\xEA pode baixar as classes do Symfony Process de modo tradicional, mas isso \\xE9 desaconselhado; prefira fazer o controle deste e de demais c\\xF3digos de terceiros atrav\\xE9s do \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getcomposer.org\"\n  }, \"Composer\"), \", um gerenciador de depend\\xEAncias para PHP que se tornou praticamente o padr\\xE3o da ind\\xFAstria. Caso voc\\xEA ainda n\\xE3o esteja utilizando no seu projeto, execute no terminal\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ composer init\\n\")), mdx(\"p\", null, \"E forne\\xE7a informa\\xE7\\xF5es b\\xE1sicas do seu projeto. Assim que o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"composer.json\"), \" estiver dispon\\xEDvel, execute\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"$ composer require symfony/process\\n\")), mdx(\"p\", null, \"Para adicionar ao seu projeto a \\xFAltima vers\\xE3o do componente Symfony Process. Todo o c\\xF3digo fica dispon\\xEDvel no diret\\xF3rio \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vendor/symfony/process\"), \" e o arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"composer.lock\"), \" \\xE9 criado para registrar qual a vers\\xE3o utilizada.\"), mdx(\"p\", null, \"Com a library em m\\xE3os, vamos recriar o exemplo passo-a-passo. Escreva, num arquivo chamado \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"exemplo.php\"), \", as seguintes linhas:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\nrequire __DIR__.'/vendor/autoload.php';\\n\\nuse Symfony\\\\Component\\\\Process\\\\Process;\\n\")), mdx(\"p\", null, \"A primeira linha vai adicionar o autoloader do Composer, tornando acess\\xEDveis todas as classes do Symfony Process. A linha seguinte permite que a classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Symfony\\\\Component\\\\Process\\\\Process\"), \" possa ser chamada apenas de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Process\"), \" no script. Ainda no mesmo arquivo, escreva:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$process = new Process('php');\\n\")), mdx(\"p\", null, \"Essa linha n\\xE3o executa o processo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"php\"), \" de imediato, apenas prepara uma inst\\xE2ncia da classe \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Process\"), \" que representa um processo antes, durante, e ap\\xF3s sua execu\\xE7\\xE3o.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$process->setInput('<?php print_r($_ENV); ?>');\\n\")), mdx(\"p\", null, \"Aqui foi definido qual conte\\xFAdo ser\\xE1 escrito em \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stdin\"), \" que o processo seja executado (esse m\\xE9todo lan\\xE7a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RuntimeException\"), \" se \\xE9 executado depois que o processo \\xE9 executado).\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"$process->run(function ($type, $buffer) {\\n    if (Process::ERR === $type) {\\n        echo 'ERR > '.$buffer;\\n    } else {\\n        echo 'OUT > '.$buffer;\\n    }\\n});\\n\")), mdx(\"p\", null, \"Aqui o processo \\xE9 executado de fato, de forma s\\xEDncrona (para executar o processo de forma as\\xEDncrona, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$process->start()\"), \" deve ser invocado no lugar de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$process->run()\"), \"), mas com um adendo: toda sa\\xEDda gerada pelo processo, em \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stdout\"), \" e \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stderr\"), \", \\xE9 passada imediatamente para o callable passado como par\\xE2metro do m\\xE9todo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"run()\"), \" (neste caso, \\xE9 uma closure). O callable deve aceitar dois par\\xE2metros: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$type\"), \", que indica se a sa\\xEDda foi escrita em \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stdout\"), \" ou \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"stderr\"), \"; \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$buffer\"), \", que cont\\xE9m o texto escrito.\"), mdx(\"p\", null, \"E... Isso \\xE9 tudo. Voc\\xEA n\\xE3o precisa fechar o processo, muito menos par\\xE1-lo. Segue o exemplo completo:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-php\"\n  }, \"<?php\\nrequire __DIR__.'/vendor/autoload.php';\\n\\nuse Symfony\\\\Component\\\\Process\\\\Process;\\n\\n$process = new Process('php');\\n$process->setInput('<?php print_r($_ENV); ?>');\\n$process->run(function ($type, $buffer) {\\n    if (Process::ERR === $type) {\\n        echo 'ERR > '.$buffer;\\n    } else {\\n        echo 'OUT > '.$buffer;\\n    }\\n});\\n\\n\")), mdx(\"h3\", null, \"Agora v\\xE1!\"), mdx(\"p\", null, \"Espero que este artigo tenha instigado o leitor investir um pouco de aten\\xE7\\xE3o ao componente Symfony Process. As possibilidades com ele s\\xE3o interessantes, principalmente se o seu desejo for de adicionar poder de fogo \\xE0 sua aplica\\xE7\\xE3o web. Em breve devo demonstrar mais casos de uso, como invoca\\xE7\\xE3o de \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"convert\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"avconv\"), \" e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rsync\"), \". At\\xE9 l\\xE1!\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/2014-10-16/symfony-process/","next":{"slug":"/2014-09-23/webbr/","title":"Contagem regressiva para a Web.br 2014!"}}},
    "staticQueryHashes": ["1607550725"]}