{"componentChunkName":"component---src-templates-post-js","path":"/2015-08-14/instalando-o-composer-com-o-composer/","result":{"data":{"mdx":{"frontmatter":{"title":"Instalando o Composer... com o Composer","date":"2015-08-14T20:00:00.000Z","formattedDate":"14 de agosto de 2015 às 20:00"},"excerpt":"Não apenas o Composer, mas uma série de ferramentas para desenvolvimento em PHP pode ser mantida atualizada utilizando o próprio Composer…","timeToRead":1,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Instalando o Composer... com o Composer\",\n  \"date\": \"2015-08-14T20:00:00.000Z\",\n  \"published\": true\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"N\\xE3o apenas o Composer, mas uma s\\xE9rie de ferramentas para desenvolvimento em PHP pode ser mantida atualizada utilizando o pr\\xF3prio Composer. Uma vez que se assume que essas ferramentas s\\xE3o utilizadas em todos os projetos, muitas vezes a adi\\xE7\\xE3o delas como depend\\xEAncia de desenvolvimento (e.g \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"composer require --dev phpunit/phunit\"), \") torna-se desnecess\\xE1ria projeto a projeto, podendo ser instalada \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"globalmente\"), \". Aqui vai a sequ\\xEAncia de passos \\u2013 realizadas numa m\\xE1quina com Ubuntu \\u2013 que demonstra como isso \\xE9 poss\\xEDvel:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Fa\\xE7a download do arquivo \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://getcomposer.org/composer.phar\"\n  }), \"https://getcomposer.org/composer.phar\"), \".\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ wget https://getcomposer.org/composer.phar\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Instale o Composer como depend\\xEAncia global com o pr\\xF3prio Composer.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ php composer.phar global require --dev composer/composer\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Adicione o diret\\xF3rio global de bin\\xE1rios \\xE0 vari\\xE1vel PATH. No Ubuntu, isso pode ser feito adicionando a seguinte linha ao arquivo \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.bashrc\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"export PATH=\\\"$HOME/.composer/vendor/bin:$PATH\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Remova o arquivo PHAR \\u2013 n\\xE3o \\xE9 mais necess\\xE1rio.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ rm composer.phar\\n\")))), mdx(\"p\", null, \"Pronto. O comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"composer\"), \" j\\xE1 est\\xE1 dispon\\xEDvel, mas sem o comando \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"self-update\"), \" embutido. Para atualiz\\xE1-lo (junto com outros bin\\xE1rios instalados), basta executar:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sh\"\n  }), \"$ composer global update\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"/2015-08-14/instalando-o-composer-com-o-composer/","next":{"slug":"/2015-06-06/como-instalar-e-usar-o-composer/","title":"Como instalar e usar o Composer?"}}}}