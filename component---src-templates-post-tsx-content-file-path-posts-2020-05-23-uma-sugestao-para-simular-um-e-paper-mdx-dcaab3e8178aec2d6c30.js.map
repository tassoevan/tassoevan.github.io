{"version":3,"file":"component---src-templates-post-tsx-content-file-path-posts-2020-05-23-uma-sugestao-para-simular-um-e-paper-mdx-dcaab3e8178aec2d6c30.js","mappings":"0NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,GAAI,OACHC,EAAAA,EAAAA,KAAsBR,EAAMS,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,0JAA2J,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,+CAAgDM,EAAAA,cAAoBT,EAAYK,KAAM,KAAM,sBAAuB,sFAAuF,KAAMI,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,oiBAAqiBM,EAAAA,cAAoBT,EAAYM,GAAI,KAAM,aAAc,mDAAoD,KAAMG,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,4NAA6N,KAAMM,EAAAA,cAAoBT,EAAYI,GAAI,KAAM,YAAa,KAAMK,EAAAA,cAAoBT,EAAYG,EAAG,KAAM,sIACrmD,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOW,QAASC,GAAaV,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,KAAsBR,EAAMS,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWZ,EAAOU,EAAAA,cAAoBX,EAAmBC,IAAUD,EAAkBC,EAC9H,E,wCCRA,SAASa,EAAaC,GACpB,IAAI,YAACC,EAAW,KAAEC,EAAI,SAAEC,GAAYH,EACpC,MAAOI,aAAa,MAACC,EAAK,KAAEC,GAAK,KAAEC,EAAI,KAAEC,GAAQP,GAC3C,QAACQ,EAAO,WAAEC,GAAcR,EAAKS,IACnC,OAAOf,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBgB,EAAAA,EAAK,CACxEP,MAAOA,EACPQ,YAAaJ,IACXb,EAAAA,cAAoBkB,EAAAA,EAAQ,KAAMlB,EAAAA,cAAoBmB,EAAAA,EAAQ,MAAOnB,EAAAA,cAAoBoB,EAAAA,EAAM,CACjGT,KAAMA,EACNF,MAAOA,EACPC,KAAM,IAAIW,KAAKA,KAAKC,MAAMZ,IAC1BI,WAAYS,KAAKC,KAAKV,GACtBF,KAAMA,GACLL,IACL,CAEe,SAASkB,EAAiBnC,GACvC,OAAOU,EAAAA,cAAoBG,EAAcb,EAAOU,EAAAA,cAAoB0B,EAAqBpC,GAC3F,C,mECpBA,MAAMqC,EAAeC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAAVJ,CAAU,oDAsB/B,IAdA,WACE,MAAM,MAAEnB,EAAK,YAAEQ,IAAgBgB,EAAAA,EAAAA,KAE/B,OACEjC,EAAAA,cAAC2B,EAAY,KACX3B,EAAAA,cAAA,UACEA,EAAAA,cAACkC,EAAAA,EAAI,CAACC,KAAK,IAAI1B,MAAOQ,GACnBR,IAKX,C,qECEA,MAAM2B,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBvC,GAC/B,MAAMwC,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAftC,EACFA,EAAWwC,GAGb,IAAIA,KAAsBxC,EACnC,GACA,CAACwC,EAAmBxC,GAExB,C","sources":["webpack://@tassoevan/tassoevan.github.io/./posts/2020-05-23/uma-sugestao-para-simular-um-e-paper.mdx","webpack://@tassoevan/tassoevan.github.io/./src/templates/post.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/NavBar.tsx","webpack://@tassoevan/tassoevan.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"É necessário o alinhamento de software e hardware para ficar perfeito, mas utilizar apenas um deles já confere uma boa aproximação do efeito desejado.\"), \"\\n\", React.createElement(_components.h2, null, \"Software\"), \"\\n\", React.createElement(_components.p, null, \"O fundo deve ser um tom de cinza claro como \", React.createElement(_components.code, null, \"rgb(236, 236, 236)\"), \" ou mais claro, enquanto a cor do texto deve ser 25% a 30% mais clara que o preto.\"), \"\\n\", React.createElement(_components.p, null, \"A fonte de corpo de texto deve ter uma aparência suave. Há uma preferência para fontes serifadas porém acredito que isto não deveria ser uma regra geral. A tipografia deve acompanhar o significado que o texto transmite onde é possível ser determinado e definida pelo leitor/usuário quando não é inferível o tom de voz do texto. Particularmente acredito que fontes serifadas são ótimas para textos de estrutura mais linear -- como ficções e artigos com poucos recursos gráficos. Uma fonte mono-espaçada seria aconselhável quando o texto deve ser \", React.createElement(_components.em, null, \"escaneado\"), \" pelo leitor, e.g., tabelas de dados e índices.\"), \"\\n\", React.createElement(_components.p, null, \"O espaçamento de linha ideal está entre 125% e 150% do tamanho da fonte. Em geral, uma margem mínima de 10pt em todas as direções de qualquer bloco de texto é suficiente para demarcar as divisões semânticas do texto.\"), \"\\n\", React.createElement(_components.h2, null, \"Hardware\"), \"\\n\", React.createElement(_components.p, null, \"Uma película protetora anti-reflexiva combinada com a variação de brilho entre 45% para interiores e 75% para iluminação exterior.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/tassoevan.github.io/tassoevan.github.io/posts/2020-05-23/uma-sugestao-para-simular-um-e-paper.mdx\";\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport Layout from '../components/Layout';\nimport NavBar from '../components/NavBar';\nimport Post from '../components/Post';\nconst query = \"2179984064\";\nfunction PostTemplate(_ref) {\n  let {pageContext, data, children} = _ref;\n  const {frontmatter: {title, date}, slug, next} = pageContext;\n  const {excerpt, timeToRead} = data.mdx;\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: title,\n    description: excerpt\n  }), React.createElement(Layout, null, React.createElement(NavBar, null), React.createElement(Post, {\n    slug: slug,\n    title: title,\n    date: new Date(Date.parse(date)),\n    timeToRead: Math.ceil(timeToRead),\n    next: next\n  }, children)));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\nimport Link from './Link';\n\nconst StyledNavBar = styled.nav`\n  h1 {\n    font-size: 1em;\n    font-weight: normal;\n    margin: 0;\n  }\n`;\n\nfunction NavBar() {\n  const { title, description } = useSiteMetadata();\n\n  return (\n    <StyledNavBar>\n      <h1>\n        <Link href='/' title={description}>\n          {title}\n        </Link>\n      </h1>\n    </StyledNavBar>\n  );\n}\n\nexport default NavBar;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","code","em","_provideComponents","components","React","wrapper","MDXLayout","PostTemplate","_ref","pageContext","data","children","frontmatter","title","date","slug","next","excerpt","timeToRead","mdx","SEO","description","Layout","NavBar","Post","Date","parse","Math","ceil","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","StyledNavBar","styled","nav","withConfig","displayName","componentId","useSiteMetadata","Link","href","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}