{"version":3,"file":"component---src-templates-post-tsx-content-file-path-posts-2015-08-14-instalando-o-composer-com-o-composer-mdx-2ebceb6216d7a7ecbcff.js","mappings":"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","sources":["webpack://@tassoevan/tassoevan.github.io/./posts/2015-08-14/instalando-o-composer-com-o-composer.mdx","webpack://@tassoevan/tassoevan.github.io/./src/templates/post.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/NavBar.tsx","webpack://@tassoevan/tassoevan.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Não apenas o Composer, mas uma série de ferramentas para desenvolvimento em PHP pode ser mantida atualizada utilizando o próprio Composer. Uma vez que se assume que essas ferramentas são utilizadas em todos os projetos, muitas vezes a adição delas como dependência de desenvolvimento (e.g \", React.createElement(_components.code, null, \"composer require --dev phpunit/phunit\"), \") torna-se desnecessária projeto a projeto, podendo ser instalada \", React.createElement(_components.strong, null, \"globalmente\"), \". Aqui vai a sequência de passos – realizadas numa máquina com Ubuntu – que demonstra como isso é possível:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Faça download do arquivo \", React.createElement(_components.a, {\n    href: \"https://getcomposer.org/composer.phar\"\n  }, \"https://getcomposer.org/composer.phar\"), \".\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"$ wget https://getcomposer.org/composer.phar\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Instale o Composer como dependência global com o próprio Composer.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"$ php composer.phar global require --dev composer/composer\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Adicione o diretório global de binários à variável PATH. No Ubuntu, isso pode ser feito adicionando a seguinte linha ao arquivo \", React.createElement(_components.code, null, \"~/.bashrc\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"export PATH=\\\"$HOME/.composer/vendor/bin:$PATH\\\"\\n\")), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"Remova o arquivo PHAR – não é mais necessário.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"$ rm composer.phar\\n\")), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Pronto. O comando \", React.createElement(_components.code, null, \"composer\"), \" já está disponível, mas sem o comando \", React.createElement(_components.code, null, \"self-update\"), \" embutido. Para atualizá-lo (junto com outros binários instalados), basta executar:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"$ composer global update\\n\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/tassoevan.github.io/tassoevan.github.io/posts/2015-08-14/instalando-o-composer-com-o-composer.mdx\";\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport Layout from '../components/Layout';\nimport NavBar from '../components/NavBar';\nimport Post from '../components/Post';\nconst query = \"2179984064\";\nfunction PostTemplate(_ref) {\n  let {pageContext, data, children} = _ref;\n  const {frontmatter: {title, date}, slug, next} = pageContext;\n  const {excerpt, timeToRead} = data.mdx;\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: title,\n    description: excerpt\n  }), React.createElement(Layout, null, React.createElement(NavBar, null), React.createElement(Post, {\n    slug: slug,\n    title: title,\n    date: new Date(Date.parse(date)),\n    timeToRead: Math.ceil(timeToRead),\n    next: next\n  }, children)));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\nimport Link from './Link';\n\nconst StyledNavBar = styled.nav`\n  h1 {\n    font-size: 1em;\n    font-weight: normal;\n    margin: 0;\n  }\n`;\n\nfunction NavBar() {\n  const { title, description } = useSiteMetadata();\n\n  return (\n    <StyledNavBar>\n      <h1>\n        <Link href='/' title={description}>\n          {title}\n        </Link>\n      </h1>\n    </StyledNavBar>\n  );\n}\n\nexport default NavBar;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","strong","ol","li","a","pre","_provideComponents","components","React","href","className","wrapper","MDXLayout","PostTemplate","_ref","pageContext","data","children","frontmatter","title","date","slug","next","excerpt","timeToRead","mdx","SEO","description","Layout","NavBar","Post","Date","parse","Math","ceil","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","StyledNavBar","styled","nav","withConfig","displayName","componentId","useSiteMetadata","Link","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}