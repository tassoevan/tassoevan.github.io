{"version":3,"file":"component---src-templates-post-tsx-content-file-path-posts-2020-05-23-dark-mode-nao-adaptativo-uma-escolha-puramente-estetica-mdx-f63966b03b9edbec01fa.js","mappings":"0NAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,KAAsBN,EAAMO,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,wGAAyGI,EAAAA,cAAoBP,EAAYI,GAAI,KAAM,aAAc,yNAA4N,KAAMG,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,+RAAgS,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,iVAAkV,KAAMI,EAAAA,cAAoBP,EAAYG,EAAG,KAAM,0VACxtC,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOS,QAASC,GAAaR,OAAOC,OAAO,CAAC,GAAGG,EAAAA,EAAAA,KAAsBN,EAAMO,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWV,EAAOQ,EAAAA,cAAoBT,EAAmBC,IAAUD,EAAkBC,EAC9H,E,wCCNA,SAASW,EAAaC,GACpB,IAAI,YAACC,EAAW,KAAEC,EAAI,SAAEC,GAAYH,EACpC,MAAOI,aAAa,MAACC,EAAK,KAAEC,GAAK,KAAEC,EAAI,KAAEC,GAAQP,GAC3C,QAACQ,EAAO,WAAEC,GAAcR,EAAKS,IACnC,OAAOf,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBgB,EAAAA,EAAK,CACxEP,MAAOA,EACPQ,YAAaJ,IACXb,EAAAA,cAAoBkB,EAAAA,EAAQ,KAAMlB,EAAAA,cAAoBmB,EAAAA,EAAQ,MAAOnB,EAAAA,cAAoBoB,EAAAA,EAAM,CACjGT,KAAMA,EACNF,MAAOA,EACPC,KAAM,IAAIW,KAAKA,KAAKC,MAAMZ,IAC1BI,WAAYS,KAAKC,KAAKV,GACtBF,KAAMA,GACLL,IACL,CAEe,SAASkB,EAAiBjC,GACvC,OAAOQ,EAAAA,cAAoBG,EAAcX,EAAOQ,EAAAA,cAAoB0B,EAAqBlC,GAC3F,C,mECpBA,MAAMmC,EAAeC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,eAAVJ,CAAU,oDAsB/B,IAdA,WACE,MAAM,MAAEnB,EAAK,YAAEQ,IAAgBgB,EAAAA,EAAAA,KAE/B,OACEjC,EAAAA,cAAC2B,EAAY,KACX3B,EAAAA,cAAA,UACEA,EAAAA,cAACkC,EAAAA,EAAI,CAACC,KAAK,IAAI1B,MAAOQ,GACnBR,IAKX,C,qECEA,MAAM2B,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBvC,GAC/B,MAAMwC,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAftC,EACFA,EAAWwC,GAGb,IAAIA,KAAsBxC,EACnC,GACA,CAACwC,EAAmBxC,GAExB,C","sources":["webpack://@tassoevan/tassoevan.github.io/./posts/2020-05-23/dark-mode-nao-adaptativo-uma-escolha-puramente-estetica.mdx","webpack://@tassoevan/tassoevan.github.io/./src/templates/post.tsx","webpack://@tassoevan/tassoevan.github.io/./src/components/NavBar.tsx","webpack://@tassoevan/tassoevan.github.io/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Advoga-se por aí que todas as interfaces digitais devem ao menos prover um modo escuro, o famigerado \", React.createElement(_components.em, null, \"dark mode\"), \". Não sei ao certo a origem dessa \\\"necessidade\\\" pós-2018, mas não é difícil conjecturar que deva ter surgido no meio do desenvolvimento de software. A justificativa? Descanso visual por uso prolongado de displays.\"), \"\\n\", React.createElement(_components.p, null, \"Acredito que a necessidade real seja outra; me baseio na escolha que muitos conhecidos fotossensíveis têm por trabalhar em ambientes escuros apesar de usar displays com nível de brilho alto, o que, além de destruir o ciclo circadiano, causa cansaço da musculatura complexa dos olhos.\"), \"\\n\", React.createElement(_components.p, null, \"O descanso deve ser para outro órgão: o cérebro do programador, que deve interpretar sintaticamente blocos de texto diferenciando palavras-chaves, identificadores, delimitadores, literais. O modo escuro seria um acessório ao realce de sintaxe, uma vez que o texto colorido é melhor diferenciado contra um fundo preto ou cinza escuro.\"), \"\\n\", React.createElement(_components.p, null, \"Para textos lineares, como os de literatura ou com poucos elementos gráficos e tópicos, tons de sépia e tons simulando o e-ink são muito mais adequados para relaxamento visual. Desta forma, o modo do tema deveria ser adaptativo ao conteúdo, mas ainda prefere-se que ele seja definido pelo contexto, como as cores do sistema ou o modo noturno.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/tassoevan.github.io/tassoevan.github.io/posts/2020-05-23/dark-mode-nao-adaptativo-uma-escolha-puramente-estetica.mdx\";\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport Layout from '../components/Layout';\nimport NavBar from '../components/NavBar';\nimport Post from '../components/Post';\nconst query = \"2179984064\";\nfunction PostTemplate(_ref) {\n  let {pageContext, data, children} = _ref;\n  const {frontmatter: {title, date}, slug, next} = pageContext;\n  const {excerpt, timeToRead} = data.mdx;\n  return React.createElement(React.Fragment, null, React.createElement(SEO, {\n    title: title,\n    description: excerpt\n  }), React.createElement(Layout, null, React.createElement(NavBar, null), React.createElement(Post, {\n    slug: slug,\n    title: title,\n    date: new Date(Date.parse(date)),\n    timeToRead: Math.ceil(timeToRead),\n    next: next\n  }, children)));\n}\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSiteMetadata } from '../hooks/useSiteMetadata';\nimport Link from './Link';\n\nconst StyledNavBar = styled.nav`\n  h1 {\n    font-size: 1em;\n    font-weight: normal;\n    margin: 0;\n  }\n`;\n\nfunction NavBar() {\n  const { title, description } = useSiteMetadata();\n\n  return (\n    <StyledNavBar>\n      <h1>\n        <Link href='/' title={description}>\n          {title}\n        </Link>\n      </h1>\n    </StyledNavBar>\n  );\n}\n\nexport default NavBar;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","em","_provideComponents","components","React","wrapper","MDXLayout","PostTemplate","_ref","pageContext","data","children","frontmatter","title","date","slug","next","excerpt","timeToRead","mdx","SEO","description","Layout","NavBar","Post","Date","parse","Math","ceil","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","StyledNavBar","styled","nav","withConfig","displayName","componentId","useSiteMetadata","Link","href","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}